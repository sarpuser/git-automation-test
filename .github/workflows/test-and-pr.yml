name: Unit test on push

on:
  push:
    branches:
      - 'feat/**'
      - 'fix/**'
    paths:
      - '**.py'

permissions:
  pull-requests: write
  contents: write

jobs:
  check-test-existence:
    name: Verify tests exist for modified files
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.collect-tests.outputs.test_files }}
      any_changed: ${{ steps.modified-files.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get modified Python files
        id: modified-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/*.py
            !**/__init__.py
      - name: Check if tests exist for modified source files
        if: steps.modified-files.outputs.any_changed == 'true'
        id: collect-tests
        run: |
          hasError=0
          testFiles=""

          # Process each modified file
          for file in ${{ steps.modified-files.outputs.all_changed_files }}; do
            # Include test files directly
            if [[ $file == tests/* ]]; then
              testFiles="$testFiles $file"
              continue
            fi

            # Extract file path components
            filename=$(basename "$file")
            dirpath=$(dirname "$file")

            # Remove src/ and package name from path if present
            if [[ "$dirpath" =~ ^src/[^/]+/.*$ ]]; then
              # File is in src/pkg/module/...
              testPath=$(echo "$dirpath" | sed -E 's|^src/[^/]+/(.*)$|\1|')
              expectedTestFile="tests/unit/${testPath}/test_${filename}"
            elif [[ "$dirpath" =~ ^src/[^/]+$ ]]; then
              # File is directly in src/pkg/
              expectedTestFile="tests/unit/test_${filename}"
            else
              # For files outside src/ and tests/, fail the check
              if [[ "$file" != tests/* ]]; then
                echo "Error: Python file found outside src/ and tests/ directories: $file"
                echo "All Python code should be in src/ or tests/"
                exit 1
              fi
            fi

            # Check if test file exists
            if [ ! -f "$expectedTestFile" ]; then
              echo "Error: No test file found for $file"
              echo "Expected test file: $expectedTestFile"
              hasError=1
            else
              echo "âœ“ Found test file for $file"
              testFiles="$testFiles $expectedTestFile"
            fi
          done

          # Store test files as output
          echo "test_files=${testFiles}" >> $GITHUB_OUTPUT

          # Exit with error if any test files were missing
          if [ $hasError -eq 1 ]; then
            echo "Some test files are missing!"
            exit 1
          fi

          echo "All modified files have corresponding test files!"

  lint-code:
    name: Lint code (ruff)
    needs: check-test-existence
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install ruff mypy
      - name: Lint code (ruff)
        run: |
          ruff check .
      - name: Check type defs (mypy)
        run: |
          mypy .

  run-unit-tests:
    name: Run unit tests
    needs: [lint-code, check-test-existence]
    if: needs.check-test-existence.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install .
      - name: Run tests with coverage
        run: |
          echo "Running tests: ${{ needs.check-test-existence.outputs.test_files }}"
          pytest ${{ needs.check-test-existence.outputs.test_files }}

  format-code:
    name: Format code (ruff)
    needs: run-unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install ruff
      - name: Format code (ruff)
        run: |
          ruff format .
      - name: Commit formatting changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git diff --quiet || (git add . && git commit -m "Apply ruff formatting" && git push)

  create-pull-request:
    name: Create PR
    needs: format-code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create or Update Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to either create a new PR or update an existing one
          gh pr create \
            --title "${{ github.ref_name }}" \
            --base main \
            --head "${{ github.ref_name }}" \
            --body "Automated PR on push to feat/ fix/ or infra/ branch" \
            || gh pr edit \
            --title "${{ github.ref_name }}" \
            --base main

  bump-version:
    name: Bump semantic version
    needs: create-pull-request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run dummy test
        run: |
          sleep 1
          exit 0